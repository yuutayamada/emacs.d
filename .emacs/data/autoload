;;; autoload --- my autoload file

;;; Commentary:
;; FIX this
;;; Code:
;; Set pair of file name and function's list
;; auto-capitalize(Note I'm using emacswiki's auto-capitalize)
;; A
("auto-async-byte-compile" auto-async-byte-compile auto-async-byte-compile-mode
 enable-auto-async-byte-compile-mode)
("android-mode" android-create-project android-mode)
;; B
("browse-url" browse-url-interactive-arg)
;; C
("capitalizer" capitalizer-mode capitalizer-comment-or-string-p)
("calfw" cfw:howm-schedule-inline calendar-date-string exit-calendar calendar-cursor-to-date)
("calendar" calendar-exit)
("comint" comint-send-string)
("css-eldoc" turn-on-css-eldoc)
("cc-mode" c-toggle-auto-newline c-toggle-hungry-state)
("cider" cider-mode cider-turn-on-eldoc-mode)
("lips-mode" common-lisp-mode lisp-mode)
;; D
("diff-mode" diff-mode my/apply-diff-face diff-refine-hunk)
;; E
("eclim-tip" eclim-tip-cycle eclim-tip-cycle-reverse)
("e2wm" e2wm:pst-get-instance e2wm:stop-management e2wm:dp-two e2wm:dp-code)
("el-get"
 el-get-package-exists-p el-get-install el-get-list-packages el-get-update
 el-get-remove)
("eclim" eclim--project-name my/boot-eclim ac-emacs-eclim-config)
;; F
("flymake-json" flymake-json-maybe-load)
("flymake-shell" flymake-shell-load)
("flycheck" flycheck-mode error-tip-error-p)
("flycheck-tip" flycheck-tip-cycle)
("flycheck-java" flycheck-java-android-project-p)
("fold_dwim" fold-dwim-toggle fold-dwim-show-all fold-dwim-hide-all)
("festival"
 festival-start festival-stop festival-say
 festivalp my/festival my/festival-read-buffer)
;; G
;; grep was moved to my_builtin-configs.el
("ghc" ; Make sure ~/.cabel/share/ghc-mode-*/ and do compiling
 ghc-init ghc-select-completion-symbol ghc-resolve-package-name)
("goto-chg" goto-last-change goto-last-change-reverse)
("go-mode" gofmt)
("grammar" grammar-mode grammar-check my/grammar-check)
("google-contacts" google-contacts-update-bbdb)
;; ("ginger-api" ginger-rephrase)
;; H
("haskell-mode" haskell-mode switch-to-haskell haskell-commnader)
("helm-ag-r"
 helm-ag-r helm-ag-r-current-file helm-ag-r-from-git-repo
 helm-ag-r-google-contacts-list helm-ag-r-pype
 helm-ag-r-shell-history helm-ag-r-git-logs)
("helm-utils" helm-find-file-as-root)
("helm-commit-message" helm-show-git-commit-messages)
("helm-gtags" helm-gtags-select my/helm-gtags)
("helm-github-issues" helm-github-issues)
("howm" howm-menu)
("hangman" hangman)
("hideshow" hs-show-block hs-already-hidden-p hs-show-all hs-hide-all)
;; I
;; J
("jade" sws-mode jade-mode)
("js-console" js-console)
("jsfmt" jsfmt-before-save jsfmt)
;; K
("keyboard-converter" keyboard-converter-find)
;; L
("lingr" lingr-login)
("lispxmp" lispxmp)
("logalimacs"
 eiji:search
 loga-lookup-in-buffer loga-lookup-in-buffer-light loga-lookup-in-popup
 loga-fallback loga-decide-source-word my/search-pronunciation)
("lookup"
 my/lookup-by-ace-jump my/helm-lookup-history myhistory-save-search-history
 myhistory-save-remembered-history Y/lookup)
;; M
;; ("magit" magit-get-top-dir magit-rebase-info magit-anything-modified-p magit-no-commit-p)
("markdown-mode" markdown-cycle)
;; need before load
("masaw" masaw masaw-mode)

;; ("my_frameinit" Y/frame-init-func Y/set-default-window-frame-alist)
;; ("myanything-c-pdfgrep" my/anything-pdfgrep)
;; ("my_sdic" sdic-describe-word-at-point sdic)
;; ("minor-mode-hack"
;;  show-minor-mode-map-priority lower-minor-mode-map-alist
;;  raise-minor-mode-map-alist)
;; N
;; R
("rubydb3x" rubydb)
;; O
("org-trello" org-trello-mode)
("open-junk-file" open-junk-file my/open-junk-today)
("outline" my/hs-hide-all)
("org"
 ;; org-mode
 org-src-edit-buffer-p
 org-return-indent
 ;; my/org-dwim
 org-in-src-block-p org-table-p
 )
("org-mobile" my/org-mobile-dwim org-mobile-dir-p)
;; P
;; ("paren" show-paren-mode)
("paredit" paredit-kill)
("package"
 package-list-packages-no-fetch list-packages package-list-packages)
("point-undo" point-undo point-redo)
("popup" popup-tip)
;; add this autoload function to avoid a warning
("powerline" powerline-default-theme my/change-powerline-color)
;; Q
;; S
("stem" stem:stripping-suffix stem:stripping-inflection)
("sequential-command-config"
 seq-home seq-end org-seq-home org-seq-end seq-upcase-backward-word
 seq-capitalize-backward-word seq-downcase-backward-word)
("sbtp"
 sbtp-begging-of-line sbtp-console-send sbtp-console-send-line
 sbtp-console-send-current-page)
("scala-mode" my/ensime-goto-next-error scala-mode)
("smart-tabs-mode"
 smart-tabs-mode smart-tabs-mode-enable smart-tabs-mode-advice
 smart-tabs-insinuate)
("s" s-chomp)
("skype" skype)
("skk-server" skk-server-live-p)
("skk-macs" skk-erase-prefix skk-current-input-mode skk-j-mode-on)
("sql" sql-set-product)
("slime" slime slime-connect slime-connected-p slime-mode)
;; T
("transpose-frame" transpose-frame flip-frame flop-frame)
("thingatpt" word-at-point)
("text-translator" text-translator-all-by-auto-selection)
;; U
("undo-tree"
 undo-tree-redo undo-tree-undo undo-tree-visualize global-undo-tree-mode)
;; V
("vc-git" vc-git-mode-line-string vc-git-branches vc-git-root)
;; W
("w3m" w3m my/w3m-search w3m-minor-mode w3m-browse-url w3m-find-file)
("windmove"
 windmove-up windmove-down windmove-left windmove-right)
("winner" winner-undo winner-redo)
;; Y
;; ("yim" helm-skk-rules)
;; below packages need specification of INIT
;; ("init_iso-transl" Y/iso-transl-toggle-minor-mode)
;; ("init_filecache" Y/filecache-ido-find-file)
("init_xmp" xmp)
;; ("init_ov" Y/ov-toggle-http-overlay Y/ov-turn-off-http-overlay
;;  Y/ov-turn-on-http-overlay Y/ov-http-overlay-at-point-p)
("init_windows"
 win-switch-menu resume-windows win-switch-to-window
 my/define-windows-prefix-key)

;; Local Variables:
;; coding: utf-8
;; mode: emacs-lisp
;; no-byte-compile: t
;; End:

;;; autoload ends here
